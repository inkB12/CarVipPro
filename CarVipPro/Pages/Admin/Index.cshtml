@page "{year?}/{month?}"
@model CarVipPro.APrenstationLayer.Pages.Admin.IndexModel
@{
    Layout = "_LayoutAdmin";
    ViewData["Title"] = "Bảng điều khiển quản trị";
}

<div class="container-fluid px-3 animate__animated animate__fadeIn">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="fw-bold text-light">
            📊 Tổng quan hệ thống <span class="text-primary">(@Model.SelectedYear)</span>
        </h3>

        <!-- Bộ lọc theo năm/tháng -->
        <form method="get" class="d-flex align-items-center">
            <select name="year" class="form-select me-2 bg-dark text-light border-secondary" style="width:120px;">
                @for (int y = DateTime.Now.Year; y >= DateTime.Now.Year - 5; y--)
                {
                    <option value="@y" selected="@(y == Model.SelectedYear)">@y</option>
                }
            </select>
            <select name="month" class="form-select me-2 bg-dark text-light border-secondary" style="width:120px;">
                <option value="">Cả năm</option>
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m" selected="@(m == Model.SelectedMonth)">@($"Tháng {m}")</option>
                }
            </select>
            <button class="btn btn-gradient">Lọc</button>
        </form>
    </div>

    <!-- Cards tổng hợp -->
    <div class="row g-3 mb-4 summary-section">
        <!-- 4 ô nhỏ -->
        <div class="col-md-1-5 col-sm-6">
            <div class="card summary-card small-card">
                <h6>Hãng Xe</h6>
                <h4>@Model.Summary.TotalCompanies</h4>
            </div>
        </div>
        <div class="col-md-1-5 col-sm-6">
            <div class="card summary-card small-card">
                <h6>Xe Điện</h6>
                <h4>@Model.Summary.TotalVehicles</h4>
            </div>
        </div>
        <div class="col-md-1-5 col-sm-6">
            <div class="card summary-card small-card">
                <h6>Loại Xe</h6>
                <h4>@Model.Summary.TotalCategories</h4>
            </div>
        </div>
        <div class="col-md-1-5 col-sm-6">
            <div class="card summary-card small-card">
                <h6>Khách Hàng</h6>
                <h4>@Model.Summary.TotalCustomers</h4>
            </div>
        </div>

        <!-- 2 ô lớn -->
        <div class="col-md-3 col-sm-6">
            <div class="card summary-card big-card">
                <h6>Đơn Hàng</h6>
                <h3 class="order-number">@Model.Summary.TotalOrders</h3>
            </div>
        </div>

        <div class="col-md-3 col-sm-6">
            <div class="card summary-card big-card">
                <h6>Doanh Thu</h6>
                <h3 class="text-success revenue-number">@Model.Summary.TotalRevenue.ToString("N0") ₫</h3>
            </div>
        </div>
    </div>

    <!-- Biểu đồ -->
    <div class="row g-4">
        <!-- Doanh thu theo tháng -->
        <div class="col-md-6">
            <div class="card p-3">
                <h6 class="fw-bold text-light mb-2"><i class="bi bi-bar-chart-line"></i> Doanh thu theo tháng</h6>
                <canvas id="monthlyRevenueChart" height="160"></canvas>
            </div>
        </div>

        <!-- Top hãng xe -->
        <div class="col-md-3">
            <div class="card p-3">
                <h6 class="fw-bold text-light mb-2"><i class="bi bi-pie-chart-fill"></i> Top Hãng Xe</h6>
                <canvas id="topCompaniesChart" height="180"></canvas>
            </div>
        </div>

        <!-- Top model xe -->
        <div class="col-md-3">
            <div class="card p-3">
                <h6 class="fw-bold text-light mb-2"><i class="bi bi-bar-chart-steps"></i> Top Model Xe</h6>
                <canvas id="topModelsChart" height="180"></canvas>
            </div>
        </div>
    </div>

    <!-- Doanh thu nhiều năm -->
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="card p-3">
                <h6 class="fw-bold text-light mb-2"><i class="bi bi-graph-up"></i> Xu hướng doanh thu theo năm</h6>
                <canvas id="yearlyRevenueChart" height="120"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @using System.Text.Json
@{
        var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = null };
        var yearlyJson = JsonSerializer.Serialize(Model.YearlyRevenues, jsonOptions);
    }
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const yearlyData = @Html.Raw(yearlyJson);
        console.log("📈 Yearly Data:", yearlyData);

        if (yearlyData && yearlyData.length > 0) {
            const ctx = document.getElementById('yearlyRevenueChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: yearlyData.map(x => x.Year), // ✅ Giữ đúng chữ hoa
                    datasets: [{
                        label: 'Doanh thu (₫)',
                        data: yearlyData.map(x => x.Revenue), // ✅ Giữ đúng chữ hoa
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.2)',
                        fill: true,
                        tension: 0.3,
                        borderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 8,
                        pointBackgroundColor: '#00e676',
                        pointBorderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'bottom',
                            labels: { color: '#e2e8f0' }
                        },
                        tooltip: {
                            callbacks: {
                                label: ctx => ctx.parsed.y.toLocaleString('vi-VN') + ' ₫'
                            },
                            backgroundColor: '#1e293b',
                            titleColor: '#fff',
                            bodyColor: '#10b981'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#94a3b8',
                                callback: v => v.toLocaleString('vi-VN') + ' ₫'
                            },
                            grid: { color: 'rgba(255,255,255,0.1)' }
                        },
                        x: {
                            ticks: { color: '#94a3b8' },
                            grid: { color: 'rgba(255,255,255,0.05)' }
                        }
                    }
                }
            });
        } else {
            document.getElementById('yearlyRevenueChart').parentElement.innerHTML +=
                "<p class='text-muted mt-3'>Không có dữ liệu doanh thu theo năm.</p>";
        }
    </script>
    <script>
        // Lấy dữ liệu từ Model
        const monthlyLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.MonthlyRevenues.Select(x => "Th " + x.Month)));
        const monthlyData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.MonthlyRevenues.Select(x => x.Revenue)));

        const topCompaniesLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.TopCompanies.Select(x => x.CompanyName)));
        const topCompaniesData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.TopCompanies.Select(x => x.VehiclesSold)));

        const topModelsLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.TopModels.Select(x => x.ModelName)));
        const topModelsData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Summary.TopModels.Select(x => x.QuantitySold)));

        // Doanh thu theo tháng
        new Chart(document.getElementById('monthlyRevenueChart'), {
            type: 'bar',
            data: {
                labels: monthlyLabels,
                datasets: [{
                    label: 'Doanh thu (₫)',
                    data: monthlyData,
                    backgroundColor: '#22d3ee',
                    borderRadius: 6
                }]
            },
            options: {
                plugins: { legend: { display: false } },
                scales: {
                    x: { ticks: { color: '#cbd5e1' } },
                    y: {
                        ticks: {
                            color: '#cbd5e1',
                            callback: v => v.toLocaleString() + ' ₫'
                        }
                    }
                }
            }
        });

        // Top hãng xe bán chạy
        new Chart(document.getElementById('topCompaniesChart'), {
            type: 'doughnut',
            data: {
                labels: topCompaniesLabels,
                datasets: [{
                    data: topCompaniesData,
                    backgroundColor: ['#6366f1', '#8b5cf6', '#06b6d4', '#facc15', '#f43f5e']
                }]
            },
            options: {
                plugins: {
                    legend: { labels: { color: '#e2e8f0' }, position: 'bottom' }
                }
            }
        });

        // Top model xe bán chạy
        new Chart(document.getElementById('topModelsChart'), {
            type: 'bar',
            data: {
                labels: topModelsLabels,
                datasets: [{
                    label: 'Số lượng bán',
                    data: topModelsData,
                    backgroundColor: '#f59e0b',
                    borderRadius: 6
                }]
            },
            options: {
                indexAxis: 'y',
                plugins: { legend: { display: false } },
                scales: {
                    x: { ticks: { color: '#cbd5e1' } },
                    y: { ticks: { color: '#cbd5e1' } }
                }
            }
        });
    </script>
}
